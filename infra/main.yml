AWSTemplateFormatVersion: "2010-09-09"
Description: "Fitness App"
Metadata: {}
Parameters:
  Environment:
    Type: String
    AllowedValues:
      - dev
      - staging
      - prod
    Description: |
      Placeholder
  HostedZoneId:
    Type: String
  CognitoDomainName:
    Type: String
    Description: |
      Placeholder
  CognitoCertificateArn:
    Type: String
    Description: |
      Placeholder
  AppDomainName:
    Type: String
    Description: |
      Placeholder
  CDNDomainName:
    Type: String
    Description: |
      Placeholder
  CDNCertificateArn:
    Type: String
    Description: |
      Placeholder
  FlaskSecretKey:
    Type: String
    Description: |
      Placeholder

Conditions: {}
# Outputs: {}

Resources:
  LambdaDependenciesLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleArchitectures:
        - x86_64
        - arm64
      CompatibleRuntimes:
        - python3.10
      Content:
        S3Bucket: !ImportValue S3SourceCodeBucket
        S3Key: dependencies/python_dependencies.zip
      Description: Fitness app lambda functions dependencies
      LayerName: FitnessAppLambdaDependencies
      # LicenseInfo: String

  IndexLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/FitnessAppIndex
      RetentionInDays: 14

  IndexRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
  IndexPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CloudWatchInsightQueryPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !GetAtt IndexLogGroup.Arn
      Roles:
        - !Ref IndexRole

  IndexFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !ImportValue S3SourceCodeBucket
        S3Key: functions/python_app.zip
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          COGNITO_LOGIN_ENDPOINT: !Ref CognitoDomainName
          FITNESS_APP_ENDPOINT: !Ref AppDomainName
          FLASK_SECRET_KEY: !Ref FlaskSecretKey
          COGNITO_USER_POOL: !Sub "https://cognito-idp.${AWS::Region}.amazonaws.com/${FitnessAppCognitoUserPool}"
          COGNITO_USER_POOL_CLIENT_ID: !Ref FitnessAppCognitoUserPoolClient
          POWERTOOLS_LOGGER_LOG_EVENT: "TRUE"
      FunctionName: FitnessAppIndex
      PackageType: Zip
      Handler: main.handler
      Runtime: python3.10
      Role: !GetAtt IndexRole.Arn
      Timeout: 10
      MemorySize: 128
      Layers:
        - !Ref LambdaDependenciesLayer
      Architectures:
        - arm64

  HomeLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/FitnessAppHome
      RetentionInDays: 14

  HomeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /

  HomePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CloudWatchInsightQueryPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !GetAtt HomeLogGroup.Arn
      Roles:
        - !Ref HomeRole

  HomeFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !ImportValue S3SourceCodeBucket
        S3Key: functions/python_app.zip
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          COGNITO_LOGIN_ENDPOINT: !Ref CognitoDomainName
          FITNESS_APP_ENDPOINT: !Ref AppDomainName
          FLASK_SECRET_KEY: !Ref FlaskSecretKey
          COGNITO_USER_POOL: !Sub "https://cognito-idp.${AWS::Region}.amazonaws.com/${FitnessAppCognitoUserPool}"
          COGNITO_USER_POOL_CLIENT_ID: !Ref FitnessAppCognitoUserPoolClient
          POWERTOOLS_LOGGER_LOG_EVENT: "TRUE"
      FunctionName: FitnessAppHome
      PackageType: Zip
      Handler: main.handler
      Runtime: python3.10
      Role: !GetAtt HomeRole.Arn
      Timeout: 10
      MemorySize: 128
      Layers:
        - !Ref LambdaDependenciesLayer
      Architectures:
        - arm64

  LoginLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/FitnessAppLogin
      RetentionInDays: 14

  LoginRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
  LoginPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CloudWatchInsightQueryPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !GetAtt LoginLogGroup.Arn
      Roles:
        - !Ref LoginRole

  LoginFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !ImportValue S3SourceCodeBucket
        S3Key: functions/python_app.zip
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          COGNITO_LOGIN_ENDPOINT: !Ref CognitoDomainName
          FITNESS_APP_ENDPOINT: !Ref AppDomainName
          FLASK_SECRET_KEY: !Ref FlaskSecretKey
          COGNITO_USER_POOL: !Sub "https://cognito-idp.${AWS::Region}.amazonaws.com/${FitnessAppCognitoUserPool}"
          COGNITO_USER_POOL_CLIENT_ID: !Ref FitnessAppCognitoUserPoolClient
          POWERTOOLS_LOGGER_LOG_EVENT: "TRUE"
      FunctionName: FitnessAppLogin
      PackageType: Zip
      Handler: main.handler
      Runtime: python3.10
      Role: !GetAtt LoginRole.Arn
      Timeout: 10
      MemorySize: 128
      Layers:
        - !Ref LambdaDependenciesLayer
      Architectures:
        - arm64

  PostWeightLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/FitnessAppPostWeight
      RetentionInDays: 14

  PostWeightRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /

  PostWeightPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CloudWatchInsightQueryPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !GetAtt PostWeightLogGroup.Arn
      Roles:
        - !Ref PostWeightRole

  PostWeightFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !ImportValue S3SourceCodeBucket
        S3Key: functions/python_app.zip
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          COGNITO_LOGIN_ENDPOINT: !Ref CognitoDomainName
          FITNESS_APP_ENDPOINT: !Ref AppDomainName
          FLASK_SECRET_KEY: !Ref FlaskSecretKey
          COGNITO_USER_POOL: !Sub "https://cognito-idp.${AWS::Region}.amazonaws.com/${FitnessAppCognitoUserPool}"
          COGNITO_USER_POOL_CLIENT_ID: !Ref FitnessAppCognitoUserPoolClient
          POWERTOOLS_LOGGER_LOG_EVENT: "TRUE"
      FunctionName: FitnessAppPostWeight
      PackageType: Zip
      Handler: main.handler
      Runtime: python3.10
      Role: !GetAtt PostWeightRole.Arn
      Timeout: 10
      MemorySize: 128
      Layers:
        - !Ref LambdaDependenciesLayer
      Architectures:
        - arm64

  GetWeightsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/FitnessAppGetWeights
      RetentionInDays: 14

  GetWeightsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
  GetWeightsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CloudWatchInsightQueryPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !GetAtt GetWeightsLogGroup.Arn
      Roles:
        - !Ref GetWeightsRole

  GetWeightsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !ImportValue S3SourceCodeBucket
        S3Key: functions/python_app.zip
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          COGNITO_LOGIN_ENDPOINT: !Ref CognitoDomainName
          FITNESS_APP_ENDPOINT: !Ref AppDomainName
          FLASK_SECRET_KEY: !Ref FlaskSecretKey
          COGNITO_USER_POOL: !Sub "https://cognito-idp.${AWS::Region}.amazonaws.com/${FitnessAppCognitoUserPool}"
          COGNITO_USER_POOL_CLIENT_ID: !Ref FitnessAppCognitoUserPoolClient
          POWERTOOLS_LOGGER_LOG_EVENT: "TRUE"
      FunctionName: FitnessAppGetWeights
      PackageType: Zip
      Handler: main.handler
      Runtime: python3.10
      Role: !GetAtt GetWeightsRole.Arn
      Timeout: 10
      MemorySize: 128
      Layers:
        - !Ref LambdaDependenciesLayer
      Architectures:
        - arm64

  FitnessAppApiStageLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: FitnessAppApiStageLogGroup
      RetentionInDays: 14

  FitnessAppApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      # ApiKeySourceType: String
      BinaryMediaTypes:
        - UTF-8
      # Description: String
      DisableExecuteApiEndpoint: true
      EndpointConfiguration:
        Types:
          - REGIONAL
      FailOnWarnings: true
      # MinimumCompressionSize: Integer
      Name: FitnessAppApi
      # Parameters:
      #   Key : Value
      # Policy: Json

  ### index function ###

  IndexFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref IndexFunction
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${FitnessAppApi}/*/GET/*"

  FitnessAppApiIndexMethod:
    DependsOn:
      - IndexFunctionPermission
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,authorization'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        Uri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IndexFunction.Arn}/invocations"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
      OperationName: Index
      ResourceId: !GetAtt FitnessAppApi.RootResourceId
      RestApiId: !Ref FitnessAppApi

  ### home fucntion ###

  FitnessAppApiHomeResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt FitnessAppApi.RootResourceId
      PathPart: home
      RestApiId: !Ref FitnessAppApi

  HomeFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref HomeFunction
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${FitnessAppApi}/*/GET/home"

  FitnessAppApiHomeMethod:
    DependsOn:
      - HomeFunctionPermission
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,authorization'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        Uri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HomeFunction.Arn}/invocations"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
      OperationName: Home
      ResourceId: !Ref FitnessAppApiHomeResource
      RestApiId: !Ref FitnessAppApi

  ### login Function ###

  FitnessAppApiLoginResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt FitnessAppApi.RootResourceId
      PathPart: login
      RestApiId: !Ref FitnessAppApi

  LoginFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref LoginFunction
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${FitnessAppApi}/*/GET/login"

  FitnessAppApiLoginMethod:
    DependsOn:
      - LoginFunctionPermission
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,authorization'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        Uri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LoginFunction.Arn}/invocations"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
      OperationName: login
      ResourceId: !Ref FitnessAppApiLoginResource
      RestApiId: !Ref FitnessAppApi

  ### getWeights Function ###

  FitnessAppApiGetWeightsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt FitnessAppApi.RootResourceId
      PathPart: getweights
      RestApiId: !Ref FitnessAppApi

  GetWeightsFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref GetWeightsFunction
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${FitnessAppApi}/*/GET/getweights"

  FitnessAppApiGetWeightsMethod:
    DependsOn:
      - GetWeightsFunctionPermission
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,authorization'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        Uri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetWeightsFunction.Arn}/invocations"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
      OperationName: Get Weights
      ResourceId: !Ref FitnessAppApiGetWeightsResource
      RestApiId: !Ref FitnessAppApi

  ### PostWeight Function ###

  FitnessAppApiPostWeightResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt FitnessAppApi.RootResourceId
      PathPart: postweight
      RestApiId: !Ref FitnessAppApi

  PostWeightFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref PostWeightFunction
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${FitnessAppApi}/*/GET/postweight"

  FitnessAppApiPostWeightPostMethod:
    DependsOn:
      - PostWeightFunctionPermission
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PostWeightFunction.Arn}/invocations"
      OperationName: post Weight
      ResourceId: !Ref FitnessAppApiPostWeightResource
      RestApiId: !Ref FitnessAppApi

  FitnessAppApiPostWeightGetMethod:
    DependsOn:
      - PostWeightFunctionPermission
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PostWeightFunction.Arn}/invocations"
      OperationName: post Weight
      ResourceId: !Ref FitnessAppApiPostWeightResource
      RestApiId: !Ref FitnessAppApi

  ### Static ANY Method ###

  FitnessAppApiStaticResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt FitnessAppApi.RootResourceId
      PathPart: "static"
      RestApiId: !Ref FitnessAppApi

  FitnessAppApiStaticProxyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt FitnessAppApiStaticResource.ResourceId
      PathPart: "{proxy+}"
      RestApiId: !Ref FitnessAppApi

  FitnessAppApiStaticAnyMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      ResourceId: !Ref FitnessAppApiStaticProxyResource
      RestApiId: !Ref FitnessAppApi
      AuthorizationType: NONE
      HttpMethod: ANY
      RequestParameters:
        method.request.path.proxy: true
      Integration:
        CacheKeyParameters:
          - "method.request.path.proxy"
        RequestParameters:
          integration.request.path.proxy: "method.request.path.proxy"
        IntegrationHttpMethod: ANY
        Type: HTTP_PROXY
        Uri: !Sub https://${CDNDomainName}/static/{proxy}
        PassthroughBehavior: WHEN_NO_MATCH
        IntegrationResponses:
          - StatusCode: "200"

  FitnessAppApiStageDeployment:
    DependsOn:
      - FitnessAppApiPostWeightPostMethod
      - FitnessAppApiPostWeightGetMethod
      - FitnessAppApiGetWeightsMethod
      - FitnessAppApiStaticAnyMethod
      - FitnessAppApiLoginMethod
      - FitnessAppApiHomeMethod
      - FitnessAppApiIndexMethod
    Type: AWS::ApiGateway::Deployment
    Properties:
      Description: !Sub "Fitness App ${Environment} Deployment"
      RestApiId: !Ref FitnessAppApi

  FitnessAppApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      AccessLogSetting:
        DestinationArn: !GetAtt FitnessAppApiStageLogGroup.Arn
        Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod","routeKey":"$context.routeKey", "status":"$context.status","protocol":"$context.protocol", "responseLength":"$context.responseLength" }'
      # CacheClusterEnabled: true
      # CacheClusterSize: "0.5"
      DeploymentId: !Ref FitnessAppApiStageDeployment
      Description: !Sub "Fitness App stage ${Environment}"
      MethodSettings:
        - HttpMethod: GET
          #  CacheDataEncrypted: true
          #   CacheTtlInSeconds: 10
          #   CachingEnabled: true
          #   DataTraceEnabled: true
          # LoggingLevel: String
          MetricsEnabled: true
          ResourcePath: /getweights
        - HttpMethod: POST
          #   CacheDataEncrypted: true
          #   CacheTtlInSeconds: 10
          #   CachingEnabled: true
          #   DataTraceEnabled: true
          # LoggingLevel: String
          MetricsEnabled: true
          ResourcePath: /postweight
      RestApiId: !Ref FitnessAppApi
      StageName: !Ref Environment
      TracingEnabled: true

  FitnessAppApiSSLCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref AppDomainName
      DomainValidationOptions:
        - DomainName: !Ref AppDomainName
          HostedZoneId: !Ref HostedZoneId
      ValidationMethod: DNS

  FitnessAppApiDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      RegionalCertificateArn: !Ref FitnessAppApiSSLCertificate
      DomainName: !Ref AppDomainName
      EndpointConfiguration:
        Types:
          - REGIONAL
      SecurityPolicy: TLS_1_2

  FitnessAppApiMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref FitnessAppApiDomainName
      RestApiId: !Ref FitnessAppApi
      Stage: !Ref FitnessAppApiStage

  FitnessAppApiDNSRecord:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: abugharbia.com.
      RecordSets:
        - Name: !Ref AppDomainName
          Type: "A"
          AliasTarget:
            DNSName: !GetAtt FitnessAppApiDomainName.RegionalDomainName
            EvaluateTargetHealth: true
            HostedZoneId: !GetAtt FitnessAppApiDomainName.RegionalHostedZoneId
  ### Cognito User Pool ###

  FitnessAppCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
          - Name: verified_phone_number
            Priority: 2
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      # AliasAttributes:
      #   - String
      AutoVerifiedAttributes:
        - email
      DeviceConfiguration:
        ChallengeRequiredOnNewDevice: true
        DeviceOnlyRememberedOnUserPrompt: true
      EmailConfiguration:
        EmailSendingAccount: DEVELOPER
        From: Mohanad Abugharbia <mgharbieh.01@gmail.com>
        ReplyToEmailAddress: mgharbieh.01@gmail.com
        SourceArn: !Sub arn:aws:ses:${AWS::Region}:${AWS::AccountId}:identity/mgharbieh.01@gmail.com
      EnabledMfas:
        - SOFTWARE_TOKEN_MFA
      MfaConfiguration: OPTIONAL
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
          TemporaryPasswordValidityDays: 1
      Schema:
        - AttributeDataType: String
          DeveloperOnlyAttribute: false
          Mutable: true
          Name: given_name
          Required: true
          StringAttributeConstraints:
            MaxLength: "255"
            MinLength: "1"
        - AttributeDataType: String
          DeveloperOnlyAttribute: false
          Mutable: true
          Name: family_name
          Required: true
          StringAttributeConstraints:
            MaxLength: "255"
            MinLength: "1"
        - AttributeDataType: String
          DeveloperOnlyAttribute: false
          Mutable: true
          Name: email
          Required: true
          StringAttributeConstraints:
            MaxLength: "255"
            MinLength: "1"
      UserAttributeUpdateSettings:
        AttributesRequireVerificationBeforeUpdate:
          - email
      UsernameAttributes:
        - email
      UsernameConfiguration:
        CaseSensitive: false
      UserPoolAddOns:
        AdvancedSecurityMode: AUDIT
      UserPoolName: Fitness App Users

  FitnessAppCognitoUserPoolDomain:
    DependsOn:
      - Route53RecordSetGroup
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      CustomDomainConfig:
        CertificateArn: !Ref CognitoCertificateArn
      Domain: !Ref CognitoDomainName
      UserPoolId: !Ref FitnessAppCognitoUserPool

  FitnessAppCognitoDomainDNSRecord:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: abugharbia.com.
      RecordSets:
        - Name: !Ref CognitoDomainName
          Type: "A"
          AliasTarget:
            DNSName: !GetAtt FitnessAppCognitoUserPoolDomain.CloudFrontDistribution
            EvaluateTargetHealth: true
            # The  following HosteZoneId is always used for alias records pointing to CF.
            HostedZoneId: "Z2FDTNDATAQYW2"

  FitnessAppCognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      AllowedOAuthFlows:
        - code
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - openid
        - email
        - phone
        - profile
        - aws.cognito.signin.user.admin
      CallbackURLs:
        - !Sub "https://${AppDomainName}/login"
      ClientName: FitnessApp
      DefaultRedirectURI: !Sub "https://${AppDomainName}/login"
      EnableTokenRevocation: true
      ExplicitAuthFlows:
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_PASSWORD_AUTH
      LogoutURLs:
        - !Sub "https://${AppDomainName}/login"
      PreventUserExistenceErrors: ENABLED
      SupportedIdentityProviders:
        - COGNITO
      UserPoolId: !Ref FitnessAppCognitoUserPool

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !ImportValue S3BucketRoot
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - s3:GetObject
            Effect: Allow
            Resource: !Join
              - "/"
              - - !ImportValue S3BucketRootArn
                - "*"
            Principal:
              AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}"

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref CDNDomainName
        DefaultCacheBehavior:
          Compress: true
          DefaultTTL: 86400
          ForwardedValues:
            QueryString: true
          MaxTTL: 31536000
          TargetOriginId: !Sub "S3-${AWS::StackName}-root"
          ViewerProtocolPolicy: "redirect-to-https"
          ResponseHeadersPolicyId: !Ref ResponseHeadersPolicy
        CustomErrorResponses:
          - ErrorCode: 404
            ErrorCachingMinTTL: 60
            ResponseCode: 404
            ResponsePagePath: "/404.html"
          - ErrorCode: 403
            ErrorCachingMinTTL: 60
            ResponseCode: 403
            ResponsePagePath: "/403.html"
        Enabled: true
        HttpVersion: "http2"
        DefaultRootObject: "index.html"
        IPV6Enabled: true
        # Logging:
        #   Bucket: !ImportValue S3BucketLogsDomainName
        #   IncludeCookies: false
        #   Prefix: 'cdn/'
        Origins:
          - DomainName: !ImportValue S3BucketRootDomainName
            Id: !Sub "S3-${AWS::StackName}-root"
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}"
        PriceClass: "PriceClass_All"
        ViewerCertificate:
          AcmCertificateArn: !Ref CDNCertificateArn
          MinimumProtocolVersion: "TLSv1.1_2016"
          SslSupportMethod: "sni-only"

  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub "CloudFront OAI for ${CDNDomainName}"

  Route53RecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: abugharbia.com.
      RecordSets:
        - Name: !Ref CDNDomainName
          Type: "A"
          AliasTarget:
            DNSName: !GetAtt "CloudFrontDistribution.DomainName"
            EvaluateTargetHealth: false
            # The  following HosteZoneId is always used for alias records pointing to CF.
            HostedZoneId: "Z2FDTNDATAQYW2"

  ResponseHeadersPolicy:
    Type: AWS::CloudFront::ResponseHeadersPolicy
    Properties:
      ResponseHeadersPolicyConfig:
        Name: !Sub "${AWS::StackName}-static-site-security-headers"
        SecurityHeadersConfig:
          StrictTransportSecurity:
            AccessControlMaxAgeSec: 63072000
            IncludeSubdomains: true
            Override: true
            Preload: true
          ContentSecurityPolicy:
            ContentSecurityPolicy: "default-src 'none'; img-src 'self'; script-src 'self'; style-src 'self'; object-src 'none'"
            Override: true
          ContentTypeOptions:
            Override: true
          FrameOptions:
            FrameOption: DENY
            Override: true
          ReferrerPolicy:
            ReferrerPolicy: "same-origin"
            Override: true
          XSSProtection:
            ModeBlock: true
            Override: true
            Protection: true
